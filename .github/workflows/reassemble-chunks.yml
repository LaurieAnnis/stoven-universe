# .github/workflows/reassemble-chunks.yml
# Unity WebGL Large File Chunk Reassembly Workflow (FIXED VERSION)
# 
# FIXED: Proper file path handling for chunks in Build/ subdirectory
# FIXED: Support for both .data and .wasm files

name: Reassemble Unity Chunks

on:
  workflow_dispatch:
    inputs:
      check_for_chunks:
        description: 'Check and reassemble Unity chunk files'
        required: false
        default: 'true'
        type: string

jobs:
  reassemble:
    name: Reassemble Unity WebGL Files
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Check for chunk files
        id: check_chunks
        run: |
          echo "🔍 Checking for Unity chunk files..."
          
          # FIXED: Look for both .data.part* and .wasm.part* files
          chunk_files=\$(find . -type f \( -name "*.data.part*" -o -name "*.wasm.part*" \))
          
          if [ -n "\$chunk_files" ]; then
            echo "📦 Found chunk files:"
            echo "\$chunk_files"
            echo "chunks_found=true" >> \$GITHUB_OUTPUT
            
            # FIXED: Count both types of chunks
            chunk_count=\$(echo "\$chunk_files" | wc -l)
            echo "chunk_count=\$chunk_count" >> \$GITHUB_OUTPUT
            
            # FIXED: List unique base files for both types
            base_files=\$(echo "\$chunk_files" | sed -E 's/\\.part[0-9]+\$//' | sort -u)
            echo "Base files to reassemble:"
            echo "\$base_files"
            
          else
            echo "✅ No chunk files found - repository already has complete files"
            echo "chunks_found=false" >> \$GITHUB_OUTPUT
          fi
          
      - name: Protect against LFS
        if: steps.check_chunks.outputs.chunks_found == 'true'
        run: |
          echo "🛡️ Adding LFS protection for chunk files..."
          
          if [ ! -f .gitattributes ]; then
            touch .gitattributes
          fi
          
          if ! grep -q "*.part*" .gitattributes; then
            echo "*.part* filter=diff text" >> .gitattributes
            echo "✅ Added LFS protection to .gitattributes"
          else
            echo "ℹ️ LFS protection already exists"
          fi
          
      - name: Reassemble chunk files
        if: steps.check_chunks.outputs.chunks_found == 'true'
        run: |
          echo "🔄 Starting chunk reassembly process..."
          echo "📊 Total chunks found: \$\{{ steps.check_chunks.outputs.chunk_count }}"
          
          files_reassembled=0
          total_size=0
          
          # FIXED: Find all unique base files for both .data and .wasm
          base_files=\$(find . -type f \( -name "*.data.part*" -o -name "*.wasm.part*" \) | sed -E 's/\\.part[0-9]+\$//' | sort -u)
          
          for basefile in \$base_files; do
            echo ""
            echo "📦 Processing: \$basefile"
            
            # FIXED: Find all parts for this EXACT file path (not just basename)
            parts=\$(find . -type f -name "\$(basename "\$basefile").part*" -path "\$(dirname "\$basefile")/*" | sort -V)
            part_count=\$(echo "\$parts" | wc -w)
            
            if [ \$part_count -eq 0 ]; then
              echo "⚠️ No parts found for \$basefile"
              continue
            fi
            
            echo "🔍 Found \$part_count parts for \$(basename "\$basefile"):"
            for part in \$parts; do
              echo "  - \$part"
            done
            
            # Verify all parts exist and are readable
            all_parts_valid=true
            for part in \$parts; do
              if [ ! -f "\$part" ] || [ ! -r "\$part" ]; then
                echo "❌ Part not accessible: \$part"
                all_parts_valid=false
                break
              fi
            done
            
            if [ "\$all_parts_valid" = false ]; then
              echo "❌ Skipping \$basefile due to missing/invalid parts"
              continue
            fi
            
            # Calculate total size of parts
            part_size=0
            for part in \$parts; do
              size=\$(stat -c%s "\$part" 2>/dev/null || echo "0")
              part_size=\$((part_size + size))
            done
            
            echo "📏 Total size of parts: \$(echo \$part_size | awk '{printf "%.2f MB", \$1/1024/1024}')"
            
            # Create backup directory in same location as original file
            backup_dir="\$(dirname "\$basefile")/.chunks_backup"
            mkdir -p "\$backup_dir"
            
            # Backup chunks before reassembly
            for part in \$parts; do
              cp "\$part" "\$backup_dir/"
            done
            echo "💾 Backed up chunks to \$backup_dir"
            
            # Reassemble with verification
            echo "🔧 Reassembling \$basefile..."
            
            {
              cat \$parts > "\$basefile.tmp"
            } || {
              echo "❌ Failed to concatenate parts for \$basefile"
              continue
            }
            
            # Verify reassembled file size
            reassembled_size=\$(stat -c%s "\$basefile.tmp" 2>/dev/null || echo "0")
            
            if [ "\$reassembled_size" -eq "\$part_size" ]; then
              # Move to final location
              mv "\$basefile.tmp" "\$basefile"
              
              echo "✅ Successfully reassembled \$basefile"
              echo "📏 Final size: \$(echo \$reassembled_size | awk '{printf "%.2f MB", \$1/1024/1024}')"
              
              files_reassembled=\$((files_reassembled + 1))
              total_size=\$((total_size + reassembled_size))
              
              # Remove chunk files after successful reassembly
              for part in \$parts; do
                rm "\$part"
                echo "🗑️ Removed chunk: \$(basename "\$part")"
              done
              
              # Remove backup after successful reassembly
              rm -rf "\$backup_dir"
              echo "🧹 Cleaned up backup directory"
              
            else
              echo "❌ Size mismatch for \$basefile (expected: \$part_size, got: \$reassembled_size)"
              echo "⚠️ Keeping backup files for manual inspection"
              rm -f "\$basefile.tmp"
            fi
          done
          
          echo ""
          echo "📊 Reassembly Summary:"
          echo "   🔧 Files reassembled: \$files_reassembled"
          echo "   📦 Total size: \$(echo \$total_size | awk '{printf "%.2f MB", \$1/1024/1024}')"
          
          if [ \$files_reassembled -eq 0 ]; then
            echo "⚠️ No files were reassembled - check logs for errors"
            exit 1
          fi
          
      - name: Verify Unity WebGL structure
        if: steps.check_chunks.outputs.chunks_found == 'true'
        run: |
          echo "🔍 Verifying Unity WebGL file structure..."
          
          unity_files_found=0
          
          if find . -name "*.data" -type f | head -1 > /dev/null; then
            data_files=\$(find . -name "*.data" -type f | wc -l)
            echo "✅ Found \$data_files .data file(s)"
            unity_files_found=\$((unity_files_found + 1))
          else
            echo "❌ No .data files found"
          fi
          
          if find . -name "*.wasm" -type f | head -1 > /dev/null; then
            wasm_files=\$(find . -name "*.wasm" -type f | wc -l)
            echo "✅ Found \$wasm_files .wasm file(s)"
            unity_files_found=\$((unity_files_found + 1))
          else
            echo "❌ No .wasm files found"
          fi
          
          if find . -name "*.framework.js" -type f | head -1 > /dev/null; then
            echo "✅ .framework.js file found"
            unity_files_found=\$((unity_files_found + 1))
          fi
          
          if find . -name "*.loader.js" -type f | head -1 > /dev/null; then
            echo "✅ .loader.js file found"
            unity_files_found=\$((unity_files_found + 1))
          fi
          
          if [ -f "index.html" ]; then
            echo "✅ index.html file found"
            unity_files_found=\$((unity_files_found + 1))
          fi
          
          echo ""
          echo "📊 Unity WebGL files found: \$unity_files_found/5"
          
          if [ \$unity_files_found -ge 3 ]; then
            echo "✅ Unity WebGL structure appears complete"
          else
            echo "⚠️ Unity WebGL structure may be incomplete"
          fi
          
      - name: Commit reassembled files
        if: steps.check_chunks.outputs.chunks_found == 'true'
        run: |
          echo "💾 Committing reassembled Unity files..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Chunk Reassembly"
          
          git add .
          
          if git diff --staged --quiet; then
            echo "ℹ️ No changes to commit"
          else
            echo "📝 Committing changes..."
            
          git commit -m "🔧 Reassemble Unity WebGL chunks - ${{ steps.check_chunks.outputs.chunk_count }} files processed"
            
            echo "✅ Changes committed successfully"
            echo "🚀 Repository now contains complete Unity WebGL files"
          fi
          
      - name: Final status report
        if: always()
        run: |
          echo ""
          echo "📋 Final Status Report"
          echo "===================="
          
          if [ "\$\{{ steps.check_chunks.outputs.chunks_found }}" = "true" ]; then
            echo "🎯 Operation: Chunk reassembly"
            echo "📦 Chunks processed: \$\{{ steps.check_chunks.outputs.chunk_count }}"
            
            # FIXED: Check for both types of remaining chunks
            remaining_chunks=\$(find . -type f \( -name "*.data.part*" -o -name "*.wasm.part*" \) | wc -l)
            
            if [ \$remaining_chunks -eq 0 ]; then
              echo "✅ SUCCESS: All chunks reassembled and removed"
              echo "🎮 Unity WebGL build ready for deployment"
            else
              echo "⚠️ WARNING: \$remaining_chunks chunk files still remain"
              echo "📋 Check reassembly logs for errors"
            fi
          else
            echo "✅ Operation: No chunks found"
            echo "📄 Repository already contains complete files"
          fi
          
          echo ""
          echo "🌐 Professional URL will be available shortly at:"
          echo "https://\$(echo \$\{{ github.repository }} | cut -d'/' -f1).unreality3d.com/\$(echo \$\{{ github.repository }} | cut -d'/' -f2)/"
